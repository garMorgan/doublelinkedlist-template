/**
*	@file : DoubleLinkedList.hpp
*	@author :  Garion Morgan
*	@date : 2015.02.25
*	Purpose: creating a list using pointers with a front and a back
*/
template<typename T>
DoubleLinkedList<T>::DoubleLinkedList()
{
	m_front = nullptr;
	m_back = nullptr;
	m_size = 0;
}
template<typename T>
DoubleLinkedList<T>::~DoubleLinkedList()
{
		
	while(!isEmpty())
	{
	remove(m_front->getValue());
	}
}
template<typename T>
bool DoubleLinkedList<T>::isEmpty() const
{
	if(m_size==0)
	{
	return true;
	}
	else
	{
	return false;
	}
}
template<typename T>
int DoubleLinkedList<T>::size() const
{
	return m_size;
}
template<typename T>
void DoubleLinkedList<T>::pushFront(T value)
{
	if(isEmpty())
	{
	Node<T>* temp = new Node<T>();
	temp->setValue(value);
	m_back=temp;
	m_front=temp;
	m_size++;
	}
	else
	{
	Node<T>* temp = new Node<T>();
	temp->setValue(value);
	m_front->setPrev(temp);
	temp->setNext(m_front);
	m_front=temp;
	m_size++;
	}
}
template<typename T>
void DoubleLinkedList<T>::pushBack(T value)
{
	if(isEmpty())
	{
	pushFront(value);
	}
	else
	{
	Node<T>* temp = new Node<T>();
	temp->setValue(value);
	m_back->setNext(temp);
	temp->setPrev(m_back);
	m_back=temp;
	m_back->setNext(nullptr);
	m_size++;
	}
}
template<typename T>
void DoubleLinkedList<T>::remove(T value) throw(std::runtime_error)
{
	Node<T>* tempNext;
	Node<T>* tempPrev;
	Node<T>* tempDelete;
	tempDelete=find(value);
	if(tempDelete==m_front && tempDelete==m_back)
	{
	Node<T>* emptyList;
	m_back=emptyList;
	m_front=emptyList;
	delete tempDelete;
	m_size--;
	}		
	else if(tempDelete==m_front)
	{
	tempPrev=m_front->getNext();
	m_front=tempPrev;
	tempPrev->setPrev(nullptr);
	delete tempDelete;
	m_size--;
	}
	else if(tempDelete==m_back)
	{
	tempNext=m_back->getPrev();
	m_back=tempNext;
	tempNext->setNext(nullptr);
	delete tempDelete;
	m_size--;
	}
	else if(tempDelete!=nullptr)
	{
	tempNext= tempDelete->getNext();
	tempPrev= tempDelete->getPrev();
	tempPrev->setNext(tempNext);
	tempNext->setPrev(tempPrev);
	m_size--;
	delete tempDelete;	
	}
	else
	{
	throw(std::runtime_error("Not in List"));
	}
	
	
}
template<typename T>
void DoubleLinkedList<T>::insertAhead(T listValue, T newValue) throw(std::runtime_error)
{
	Node<T>* tempFind;
	Node<T>* tempNext;
	Node<T>* tempPrev;
	Node<T>* tempAdd = new Node<T>();
	tempFind=find(listValue);
	
	if(tempFind==m_front)
	{
		pushFront(newValue);
	}
	else if(tempFind!=nullptr)
	{
		tempAdd->setValue(newValue);
		tempNext = tempFind;
		tempPrev = tempFind->getPrev();
		tempPrev->setNext(tempAdd);
		tempFind->setPrev(tempAdd);
		tempAdd->setPrev(tempPrev);
		tempAdd->setNext(tempNext);
		m_size++;
	}
	else
	{
	throw(std::runtime_error("Not in List"));
	delete tempAdd;
	}		
}
template<typename T>
void DoubleLinkedList<T>::insertBehind(T listValue, T newValue) throw(std::runtime_error)
{
	Node<T>* tempFind;
	Node<T>* tempNext;
	Node<T>* tempPrev;
	Node<T>* tempAdd = new Node<T>();
	tempFind = m_front;
	tempFind=find(listValue);
	
	if(tempFind==m_back)
	{
		pushBack(newValue);
	}
	else if(tempFind!=nullptr)
	{
		tempAdd->setValue(newValue);
		tempPrev = tempFind;
		tempNext = tempFind->getNext();
		tempNext->setPrev(tempAdd);
		tempFind->setNext(tempAdd);
		tempAdd->setPrev(tempPrev);
		tempAdd->setNext(tempNext);
		m_size++;
	}
	else
	{
	throw(std::runtime_error("Not in List"));
	delete tempAdd;
	}
	delete tempAdd;	
}

template<typename T>
Node<T>* DoubleLinkedList<T>::find(T value) const
{
	Node<T>* tempFind;
	tempFind = m_front;
	while(tempFind->getNext()!=nullptr)
	{
		if(tempFind->getValue()==value)
		{
			return tempFind;
		}
	tempFind= tempFind->getNext();
	}
		if(tempFind->getValue()==value)
		{
			return tempFind;
		}
		else
		{
			return nullptr;
		}
		
		
}
template<typename T>
void DoubleLinkedList<T>::printList() const
{
	Node<T>* print;
	print = m_front;
	if(isEmpty())
	{
	std::cout << "List is empty" << std::endl;
	}
	else
	{
	while(print->getNext()!=nullptr)
		{
		std::cout << print->getValue() << ",";
		print = print->getNext();
		}
	std::cout << print->getValue() << std::endl;
	}
}
